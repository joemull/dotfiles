set background=dark           " dark background first on opening
set nocompatible              " required
filetype off                  " required
set title                     " show title of doc
syntax on                     " turn on syntax highlighting

" Don't require save before switching buffers
set hidden

" Use jk not escape
inoremap jk <ESC>

" Comma as leader
let mapleader = ","

" Switching panes
nnoremap ; <C-W>

" Plugins using vim plug
" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

" Plug 'vim-scripts/indentpython.vim'

Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': ':CocInstall coc-pyright coc-tsserver coc-json coc-htmldjango coc-html coc-css @yaegassy/coc-tailwindcss3 @yaegassy/coc-volar coc-svg'}

Plug 'sainnhe/everforest'

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'christoomey/vim-system-copy'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

Plug 'dhruvasagar/vim-table-mode'
" Plug 'jalvesaq/zotcite'
Plug 'preservim/vim-pencil'
Plug 'preservim/vim-lexical'
Plug 'preservim/vim-litecorrect'
Plug 'kana/vim-textobj-user'
Plug 'preservim/vim-textobj-quote'
Plug 'preservim/vim-textobj-sentence'
Plug 'junegunn/goyo.vim'
Plug 'pangloss/vim-javascript'
Plug 'mracos/mermaid.vim'
Plug 'lepture/vim-jinja'
" ...

call plug#end()

" Finish installation of plugins
" call mkdp#util#install()

" COC
set nobackup
set nowritebackup
set updatetime=300
set signcolumn=yes

let g:coc_config_home = '/.dotfiles/vim/'

" Turn off COC
" let g:coc_start_at_startup=0

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use tab for trigger completion with characters ahead and navigate
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Prose-related plugins
" let g:pencil#wrapModeDefault = 'soft'
" function SetPencilOptions()
"   call pencil#init()
"   setlocal colorcolumn=80
" endfunction

" Press K before insertion commands like i, o, a to disable autoformat for
" that insert
let g:pencil#map#suspend_af = 'K'

setlocal textwidth=80

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd,text,rst call pencil#init()
                            \ | call lexical#init()
                            \ | call litecorrect#init()
                            \ | call textobj#quote#init()
                            \ | call textobj#sentence#init()
augroup END

" Markdown display settings
let g:vim_markdown_folding_disabled = 1
let g:markdown_fenced_languages = ['html', 'css', 'javascript', 'python', 'sh']
let g:vim_markdown_fenced_languages = ['js=javascript']
set conceallevel=2

" Indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

au BufNewFile,BufRead *.html,*.xml,*.js,*.ts,*.css,*.scss,*.json,*.svg,*.sh,*.md,*.jinja
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab |
    " \ set autoindent |
    \ set fileformat=unix |

" Flag unecessary whitespace
" define BadWhitespace before using in a match
highlight BadWhitespace ctermbg=red guibg=darkred
au BufNewFile,BufRead *.py,*.js,*.css,*.scss,*.json,*.html,*.xml match BadWhitespace /\s\+$/ |
set list
set listchars=tab:!·,trail:·

" UTF-8 support
set encoding=utf-8

" Color schemes
colorscheme everforest

" Line numbering
set number relativenumber

" No swap file
set noswapfile

" Searching
set hlsearch
set incsearch
nnoremap <esc><esc> :noh<return><esc>

" Copy and paste
set clipboard=unnamedplus
let s:uname = system("uname")
if s:uname == "Darwin\n"
  set clipboard=unnamed
endif

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Cursor
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" FZF
" Most of this is based on https://github.com/iggredible/Learn-Vim/blob/master/ch03_searching_files.md
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <Leader>/ :BLines<CR>
nnoremap <silent> <Leader>' :Marks<CR>
nnoremap <silent> <Leader>g :Commits<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>

set grepprg=rg\ --vimgrep\ --smart-case\ --follow

" The following one is a custom command for searching nested git repositories
" like Janeway plugins and custom themes.
" The `--no-ignore` flag is the only difference from the default FZF Rg
" command.
" See https://github.com/junegunn/fzf.vim#example-rg-command-with-preview-window
nnoremap <silent> <Leader>d :RgDeep<CR>
command! -bang -nargs=* RgDeep
\ call fzf#vim#grep(
\   "rg --hidden --no-ignore --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>),
\   1,
\   <bang>0
\ )
