set background=dark           " dark background first on opening
set nocompatible              " required
filetype off                  " required
set title                     " show title of doc
syntax on                     " turn on syntax highlighting

" Don't require save before switching buffers
set hidden

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)
Plugin 'vim-scripts/indentpython.vim'
Plugin 'ycm-core/YouCompleteMe'

Plugin 'dense-analysis/ale'

Plugin 'sainnhe/everforest'

Plugin 'tpope/vim-fugitive'

Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'

Plugin 'christoomey/vim-system-copy'
Plugin 'iamcco/markdown-preview.nvim'
Plugin 'godlygeek/tabular'
Plugin 'preservim/vim-markdown'

Plugin 'dhruvasagar/vim-table-mode'
" Plugin 'jalvesaq/zotcite'
Plugin 'preservim/vim-pencil'
Plugin 'preservim/vim-lexical'
Plugin 'preservim/vim-litecorrect'
Plugin 'kana/vim-textobj-user'
Plugin 'preservim/vim-textobj-quote'
Plugin 'preservim/vim-textobj-sentence'
Plugin 'junegunn/goyo.vim'
" ...

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Finish installation of plugins
call mkdp#util#install()

" Prose-related plugins
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
                            \ | call lexical#init()
                            \ | call litecorrect#init()
                            \ | call textobj#quote#init()
                            \ | call textobj#sentence#init()
augroup END

" Use jk not escape
inoremap jk <ESC>

" Comma as leader
let mapleader = ","

" Switching panes
nnoremap ; <C-W>

" Markdown display settings
let g:vim_markdown_folding_disabled = 1
let g:markdown_fenced_languages = ['html', 'css', 'javascript', 'python', 'sh']
let g:vim_markdown_fenced_languages = ['js=javascript']
set conceallevel=2

" Indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

au BufNewFile,BufRead *.html,*.xml,*.js,*.css,*.scss,*.json,*.svg
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" Flag unecessary whitespace
" define BadWhitespace before using in a match
highlight BadWhitespace ctermbg=red guibg=darkred
au BufNewFile,BufRead *.py,*.js,*.css,*.scss,*.json,*.html,*.xml match BadWhitespace /\s\+$/ |
set list
set listchars=tab:!·,trail:·

" UTF-8 support
set encoding=utf-8

" Auto-completing
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" ALE

let b:ale_linters = {
\ 'python': ['flake8'],
\ 'scss': ['stylelint'],
\ 'markdown': ['markdownlint'],
\ 'html': ['htmlhint', 'tidy'],
\ 'javascript': ['standard'],
\ }

let g:ale_use_global_executables = 1
let g:ale_css_stylelint_options = '--config ~/.stylelintrc.json'
let g:ale_markdown_markdownlint_executable = 'markdownlint-cli2'

" Color schemes
colorscheme everforest


" Line numbering
set number relativenumber

" No swap file
set noswapfile

" Searching
set hlsearch
set incsearch
nnoremap <esc><esc> :noh<return><esc>

" Ctrl P settings
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files --recurse-submodules']
let g:ctrlp_working_path_mode = ''
let g:ctrlp_max_files = 0

" Copy and paste
set clipboard=unnamedplus

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Cursor
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" FZF
" Most of this is based on https://github.com/iggredible/Learn-Vim/blob/master/ch03_searching_files.md
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <Leader>/ :BLines<CR>
nnoremap <silent> <Leader>' :Marks<CR>
nnoremap <silent> <Leader>g :Commits<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>

set grepprg=rg\ --vimgrep\ --smart-case\ --follow

" The following one is a custom command for searching nested git repositories
" like Janeway plugins and custom themes.
" The `--no-ignore` flag is the only difference from the default FZF Rg
" command.
" See https://github.com/junegunn/fzf.vim#example-rg-command-with-preview-window
nnoremap <silent> <Leader>d :RgDeep<CR>
command! -bang -nargs=* RgDeep
\ call fzf#vim#grep(
\   "rg --no-ignore --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>),
\   1,
\   <bang>0
\ )
